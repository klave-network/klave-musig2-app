// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_register_routes_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::register_routes();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_initiate_musig_context_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::initiate_musig_context(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_load_musig_agg_session_ids_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::load_musig_agg_session_ids(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_load_musig_agg_session_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::load_musig_agg_session(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_submit_pub_nonce_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::submit_pub_nonce(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_submit_partial_signature_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::submit_partial_signature(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_final_signature_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::get_final_signature(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_register_user_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::register_user(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_load_current_user_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::load_current_user(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_is_registered_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::is_registered(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_all_users_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::get_all_users(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_key_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::create_key(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_load_keys_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::load_keys(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_load_key_name_ids_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::load_key_name_ids(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_load_key_pair_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::load_key_pair(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_musig_session_definition_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::create_musig_session_definition(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_load_musig_session_ids_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::load_musig_session_ids(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_update_musig_user_public_key_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::update_musig_user_public_key(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_load_musig_session_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::load_musig_session(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_update_musig_aggregation_session_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::update_musig_aggregation_session(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_public_nonce_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::create_public_nonce(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_partial_signature_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::create_partial_signature(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_verify_final_signature_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::verify_final_signature(_rt::string_lift(bytes0));
}
pub trait Guest {
    /// The world is a collection of functions that can be called from the component.
    fn register_routes();
    /// routes dedicated to the MuSig2 aggregator
    fn initiate_musig_context(cmd: _rt::String);
    fn load_musig_agg_session_ids(cmd: _rt::String);
    fn load_musig_agg_session(cmd: _rt::String);
    fn submit_pub_nonce(cmd: _rt::String);
    fn submit_partial_signature(cmd: _rt::String);
    fn get_final_signature(cmd: _rt::String);
    /// routes for user management
    fn register_user(cmd: _rt::String);
    fn load_current_user(cmd: _rt::String);
    fn is_registered(cmd: _rt::String);
    fn get_all_users(cmd: _rt::String);
    /// routes for key management
    fn create_key(cmd: _rt::String);
    fn load_keys(cmd: _rt::String);
    fn load_key_name_ids(cmd: _rt::String);
    fn load_key_pair(cmd: _rt::String);
    /// routes for MuSig2 session management
    fn create_musig_session_definition(cmd: _rt::String);
    fn load_musig_session_ids(cmd: _rt::String);
    fn update_musig_user_public_key(cmd: _rt::String);
    fn load_musig_session(cmd: _rt::String);
    fn update_musig_aggregation_session(cmd: _rt::String);
    /// routes for specific MuSig2 operations performed by each user
    fn create_public_nonce(cmd: _rt::String);
    fn create_partial_signature(cmd: _rt::String);
    fn verify_final_signature(cmd: _rt::String);
}
#[doc(hidden)]
macro_rules! __export_world_musig_compute_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[export_name = "register-routes"] unsafe extern "C" fn
        export_register_routes() { $($path_to_types)*::
        _export_register_routes_cabi::<$ty > () } #[export_name =
        "initiate-musig-context"] unsafe extern "C" fn export_initiate_musig_context(arg0
        : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_initiate_musig_context_cabi::<$ty > (arg0, arg1) } #[export_name =
        "load-musig-agg-session-ids"] unsafe extern "C" fn
        export_load_musig_agg_session_ids(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_load_musig_agg_session_ids_cabi::<$ty > (arg0, arg1)
        } #[export_name = "load-musig-agg-session"] unsafe extern "C" fn
        export_load_musig_agg_session(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_load_musig_agg_session_cabi::<$ty > (arg0, arg1) }
        #[export_name = "submit-pub-nonce"] unsafe extern "C" fn
        export_submit_pub_nonce(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_submit_pub_nonce_cabi::<$ty > (arg0, arg1) } #[export_name =
        "submit-partial-signature"] unsafe extern "C" fn
        export_submit_partial_signature(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_submit_partial_signature_cabi::<$ty > (arg0, arg1) }
        #[export_name = "get-final-signature"] unsafe extern "C" fn
        export_get_final_signature(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_get_final_signature_cabi::<$ty > (arg0, arg1) } #[export_name =
        "register-user"] unsafe extern "C" fn export_register_user(arg0 : * mut u8, arg1
        : usize,) { $($path_to_types)*:: _export_register_user_cabi::<$ty > (arg0, arg1)
        } #[export_name = "load-current-user"] unsafe extern "C" fn
        export_load_current_user(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_load_current_user_cabi::<$ty > (arg0, arg1) } #[export_name =
        "is-registered"] unsafe extern "C" fn export_is_registered(arg0 : * mut u8, arg1
        : usize,) { $($path_to_types)*:: _export_is_registered_cabi::<$ty > (arg0, arg1)
        } #[export_name = "get-all-users"] unsafe extern "C" fn export_get_all_users(arg0
        : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_get_all_users_cabi::<$ty > (arg0, arg1) } #[export_name = "create-key"]
        unsafe extern "C" fn export_create_key(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_create_key_cabi::<$ty > (arg0, arg1) } #[export_name
        = "load-keys"] unsafe extern "C" fn export_load_keys(arg0 : * mut u8, arg1 :
        usize,) { $($path_to_types)*:: _export_load_keys_cabi::<$ty > (arg0, arg1) }
        #[export_name = "load-key-name-ids"] unsafe extern "C" fn
        export_load_key_name_ids(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_load_key_name_ids_cabi::<$ty > (arg0, arg1) } #[export_name =
        "load-key-pair"] unsafe extern "C" fn export_load_key_pair(arg0 : * mut u8, arg1
        : usize,) { $($path_to_types)*:: _export_load_key_pair_cabi::<$ty > (arg0, arg1)
        } #[export_name = "create-musig-session-definition"] unsafe extern "C" fn
        export_create_musig_session_definition(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_create_musig_session_definition_cabi::<$ty > (arg0,
        arg1) } #[export_name = "load-musig-session-ids"] unsafe extern "C" fn
        export_load_musig_session_ids(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_load_musig_session_ids_cabi::<$ty > (arg0, arg1) }
        #[export_name = "update-musig-user-public-key"] unsafe extern "C" fn
        export_update_musig_user_public_key(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_update_musig_user_public_key_cabi::<$ty > (arg0,
        arg1) } #[export_name = "load-musig-session"] unsafe extern "C" fn
        export_load_musig_session(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_load_musig_session_cabi::<$ty > (arg0, arg1) } #[export_name =
        "update-musig-aggregation-session"] unsafe extern "C" fn
        export_update_musig_aggregation_session(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_update_musig_aggregation_session_cabi::<$ty > (arg0,
        arg1) } #[export_name = "create-public-nonce"] unsafe extern "C" fn
        export_create_public_nonce(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_create_public_nonce_cabi::<$ty > (arg0, arg1) } #[export_name =
        "create-partial-signature"] unsafe extern "C" fn
        export_create_partial_signature(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_create_partial_signature_cabi::<$ty > (arg0, arg1) }
        #[export_name = "verify-final-signature"] unsafe extern "C" fn
        export_verify_final_signature(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_verify_final_signature_cabi::<$ty > (arg0, arg1) }
        };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_musig_compute_cabi;
#[rustfmt::skip]
mod _rt {
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_musig_compute_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_musig_compute_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_musig_compute_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:component:musig-compute:musig-compute:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 755] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xef\x04\x01A\x02\x01\
A\x19\x01@\0\x01\0\x04\0\x0fregister-routes\x01\0\x01@\x01\x03cmds\x01\0\x04\0\x16\
initiate-musig-context\x01\x01\x04\0\x1aload-musig-agg-session-ids\x01\x01\x04\0\
\x16load-musig-agg-session\x01\x01\x04\0\x10submit-pub-nonce\x01\x01\x04\0\x18su\
bmit-partial-signature\x01\x01\x04\0\x13get-final-signature\x01\x01\x04\0\x0dreg\
ister-user\x01\x01\x04\0\x11load-current-user\x01\x01\x04\0\x0dis-registered\x01\
\x01\x04\0\x0dget-all-users\x01\x01\x04\0\x0acreate-key\x01\x01\x04\0\x09load-ke\
ys\x01\x01\x04\0\x11load-key-name-ids\x01\x01\x04\0\x0dload-key-pair\x01\x01\x04\
\0\x1fcreate-musig-session-definition\x01\x01\x04\0\x16load-musig-session-ids\x01\
\x01\x04\0\x1cupdate-musig-user-public-key\x01\x01\x04\0\x12load-musig-session\x01\
\x01\x04\0\x20update-musig-aggregation-session\x01\x01\x04\0\x13create-public-no\
nce\x01\x01\x04\0\x18create-partial-signature\x01\x01\x04\0\x16verify-final-sign\
ature\x01\x01\x04\0%component:musig-compute/musig-compute\x04\0\x0b\x13\x01\0\x0d\
musig-compute\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.220.1\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
